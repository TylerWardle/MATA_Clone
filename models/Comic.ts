// A callback function is passed in as a parameter for every method to make operations in mongoose synchronous

export class Comic {

    // class variables
    mongoose: any;
    schema: any;
    comicSchema: any;
    static comic: any = null; // static class variable

    // intializing a comic object establishes a DB connection
    constructor(mongoose:any) {
        this.mongoose = mongoose;
        this.schema = this.mongoose.Schema;
        
        // define Comic Object schema for storing Comic data fields
        this.comicSchema = new this.schema({  // NOTE* comicID is implicity generated by DB service at time of document creation (attribute is "_id")
            title: String,
            authorUsername: String,
            publicationDate: String,
            description: String,
            genre: String,
            toPublish: Boolean
        });

        if (Comic.comic == null) { // ensure model is only initialized once
            Comic.comic = this.mongoose.model('Comic', this.comicSchema);
        }
    }

    // INSERT **WORKS**
    // an _id that we use as ComicID is auto-generated when we insert a new comic object into the DB
    // we pass this id back to the client
    insert(_title: String, _authorUsername: String, _publicationDate: String, _description: String, _genre: String, _toPublish: Boolean, callback: Function): any {
        var db = this.mongoose.connection;

        // create a new comic object with the client given data fields
        var c = new Comic.comic({
            title: _title,
            authorUsername: _authorUsername,
            publicationDate: _publicationDate,
            description: _description,
            genre: _genre,
            toPublish: _toPublish
        });
        
        // insert the new comic obj into the DB
        c.save(function (err, doc) {
            if (err)
                return console.error(err);
            // pass back the ComicID after the save function is done executing
            callback(doc._id.toString());
        });
    }

    // GET **WORKS**
    // we use the comicID to retrieve a comic from the DB
    get(_comicID: String, callback: Function): any {
        var db = this.mongoose.connection;
        var comicModel = Comic.comic;
       
        comicModel.findById({ _id: _comicID }, function (err, doc) {
            if (err)
                return console.error(err);
            // pass back the retrieved comic object to the client
            callback(doc);
        });

    }

    // GETALL **WORKS**
    // we get every comic record in the collection
    getAll(callback: Function): any {
        var db = this.mongoose.connection;
        var comicModel = Comic.comic;

        comicModel.find({}, function (err, docs) {
            if (err)
                return console.error(err);
            callback(docs);
        });
    }

    // UPDATE **WORKS**
    update(_comicID: String, _title: String, _authorUsername: String, _publicationDate: String, _description: String, _genre: String, _toPublish: Boolean, callback: Function): void {
        var db = this.mongoose.connection;
        var comicModel = Comic.comic;

        var a_comic = new Comic.comic({
            title: _title,
            authorUsername: _authorUsername,
            publicationDate: _publicationDate,
            description: _description,
            genre: _genre,
            toPublish: _toPublish
        });

        var comicData = a_comic.toObject();

        delete comicData._id; // rid of mongoose error of updating id
   
        comicModel.update({ _id: _comicID }, comicData, { multi: false }, function (err, doc) {
            if (err)
                return console.error(err);
            callback();
        });

    }

    
    // DELETE **WORKS **
    delete(_comicID: String, callback: Function): void {
        var db = this.mongoose.connection;
        var comicModel = Comic.comic;
      
        comicModel.remove({ _id: _comicID }, function (err, doc) {
            if (err)
                return console.error(err);
            callback();
        });

    }
}
