// TODO:
// added a <list>contributor data field to Comic schema

// A callback function is passed in as a parameter for every method to make operations in mongoose synchronous

export class Comic {

    // class variables
    mongoose: any;
    schema: any;
      comicSchema: any;
    comic: any;

     // intializing a comic object establishes a DB connection
    constructor() {
        this.mongoose = require('mongoose');
        this.mongoose.connect('mongodb://localhost/MATA');
        this.schema = this.mongoose.Schema;

        // define Comic bject schema for storing Comic data fields
        this.comicSchema = new this.schema({  // NOTE* comicID is implicity generated by DB service at time of document creation (attribute is "_id")
            authorID: String,
            title: String,
            author_username: String,   
            publicationDate: String,
            description: String,
            genre: String,
            toPublish: Boolean
        });

        this.comic = this.mongoose.model('Comic', this.comicSchema);
    }

     // INSERT
    // an _id that we use as ComicID is auto-generated when we insert a new comic object into the DB
    // we pass this id back to the client
    insert(_authorID: String, _title: String, _author_username: String, _publicationDate: String, _description: String, _genre: String, _toPublish: Boolean, callback: Function): any {
        var db = this.mongoose.connection;

        // create a new comic object with the client given data fields
        var c = new this.comic({
            authorID: _authorID,
            title: _title,
            author_username: _author_username,
            publicationDate: _publicationDate,
            description: _description,
            genre: _genre,
            toPublish: _toPublish  });
        
        // insert the new comic obj into the DB
        c.save(function (err, doc) {
            if (err)
                return console.error(err);
            // pass back the ComicID after the save function is done executing
            callback(doc._id.toString());
        });
    }

   // GET    // we use the comic identifier to retrieve a comic from the DB
    get(_comicID: String, callback: Function): any {
        var db = this.mongoose.connection;
        var comicModel = this.comic;
       
comicModel.findById({ _id: _comicID }, function (err, doc) {
            if (err)
                return console.error(err);
        // pass back the retrieved comic object to the client
            callback(doc);
        });

   }

    // UPDATE
    update(_comicID: String, a_comic: any, callback: Function): void {
        var db = this.mongoose.connection;
        var comicModel = this.comic;
       
        // create a new document if no Comic document with "_id = comicID" exists, otherwise update the existing document by replacing all fields with comicObj fields
        comicModel.update({ _id: _comicID }, a_comic, { upsert: true }, function (err, doc) {
            if (err)
                return console.error(err);
            callback();
        });

    }

    
    // DELETE 
    delete(_comicID: String, callback: Function): void {
        var db = this.mongoose.connection;
        var comicModel = this.comic;
      
        comicModel.remove({ _id: _comicID }, function (err, doc) {
            if (err)
                return console.error(err);
            callback();
        });

    }
}